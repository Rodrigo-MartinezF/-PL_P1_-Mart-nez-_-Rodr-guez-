Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> assign ;
Rule 2     program -> assign ; program
Rule 3     assign -> ID = NUMBER

Terminals, with rules where they appear

;                    : 1 2
=                    : 3
ID                   : 3
NUMBER               : 3
error                : 

Nonterminals, with rules where they appear

assign               : 1 2
program              : 2 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . assign ;
    (2) program -> . assign ; program
    (3) assign -> . ID = NUMBER

    ID              shift and go to state 3

    program                        shift and go to state 1
    assign                         shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> assign . ;
    (2) program -> assign . ; program

    ;               shift and go to state 4


state 3

    (3) assign -> ID . = NUMBER

    =               shift and go to state 5


state 4

    (1) program -> assign ; .
    (2) program -> assign ; . program
    (1) program -> . assign ;
    (2) program -> . assign ; program
    (3) assign -> . ID = NUMBER

    $end            reduce using rule 1 (program -> assign ; .)
    ID              shift and go to state 3

    assign                         shift and go to state 2
    program                        shift and go to state 6

state 5

    (3) assign -> ID = . NUMBER

    NUMBER          shift and go to state 7


state 6

    (2) program -> assign ; program .

    $end            reduce using rule 2 (program -> assign ; program .)


state 7

    (3) assign -> ID = NUMBER .

    ;               reduce using rule 3 (assign -> ID = NUMBER .)

