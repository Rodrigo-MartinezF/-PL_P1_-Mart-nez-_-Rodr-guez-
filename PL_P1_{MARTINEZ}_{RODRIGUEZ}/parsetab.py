
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BINARY COMA DOS_PUNTOS FALSE HEXNUM IGUAL INTEGER LLAVE_APERTURA LLAVE_CIERRE MAYOR MAYOR_IGUAL MENOR MENOR_IGUAL NULL OCTAL REAL SCIENTIFIC STRING_WITHOUT_QUOTES STRING_WITH_QUOTES TRUE\n    start : object\n          | empty\n    \n    object : LLAVE_APERTURA pairs LLAVE_CIERRE\n           | LLAVE_APERTURA LLAVE_CIERRE\n    \n    pairs : pair\n          | pair COMA pairs\n    \n    pair : STRING_WITH_QUOTES DOS_PUNTOS value\n         | STRING_WITHOUT_QUOTES DOS_PUNTOS value\n    \n    value : STRING_WITH_QUOTES\n          | number\n          | boolean\n          | null\n          | object\n          | comparison_operation\n    \n    boolean : TRUE\n            | FALSE\n    \n    null : NULL\n    \n    number : INTEGER\n            | REAL\n            | SCIENTIFIC\n            | BINARY\n            | OCTAL\n            | HEXNUM\n    \n    comparison_operation : number comparison_operator number\n    \n    comparison_operator : IGUAL\n                        | MAYOR\n                        | MAYOR_IGUAL\n                        | MENOR\n                        | MENOR_IGUAL\n    \n    empty :\n    '
    
_lr_action_items = {'LLAVE_APERTURA':([0,12,13,],[4,4,4,]),'$end':([0,1,2,3,6,10,],[-30,0,-1,-2,-4,-3,]),'LLAVE_CIERRE':([4,5,6,7,10,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,38,],[6,10,-4,-5,-3,-6,-9,-7,-10,-11,-12,-13,-14,-18,-19,-20,-21,-22,-23,-15,-16,-17,-8,-24,]),'STRING_WITH_QUOTES':([4,11,12,13,],[8,8,15,15,]),'STRING_WITHOUT_QUOTES':([4,11,],[9,9,]),'COMA':([6,7,10,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,38,],[-4,11,-3,-9,-7,-10,-11,-12,-13,-14,-18,-19,-20,-21,-22,-23,-15,-16,-17,-8,-24,]),'DOS_PUNTOS':([8,9,],[12,13,]),'INTEGER':([12,13,32,33,34,35,36,37,],[22,22,22,-25,-26,-27,-28,-29,]),'REAL':([12,13,32,33,34,35,36,37,],[23,23,23,-25,-26,-27,-28,-29,]),'SCIENTIFIC':([12,13,32,33,34,35,36,37,],[24,24,24,-25,-26,-27,-28,-29,]),'BINARY':([12,13,32,33,34,35,36,37,],[25,25,25,-25,-26,-27,-28,-29,]),'OCTAL':([12,13,32,33,34,35,36,37,],[26,26,26,-25,-26,-27,-28,-29,]),'HEXNUM':([12,13,32,33,34,35,36,37,],[27,27,27,-25,-26,-27,-28,-29,]),'TRUE':([12,13,],[28,28,]),'FALSE':([12,13,],[29,29,]),'NULL':([12,13,],[30,30,]),'IGUAL':([17,22,23,24,25,26,27,],[33,-18,-19,-20,-21,-22,-23,]),'MAYOR':([17,22,23,24,25,26,27,],[34,-18,-19,-20,-21,-22,-23,]),'MAYOR_IGUAL':([17,22,23,24,25,26,27,],[35,-18,-19,-20,-21,-22,-23,]),'MENOR':([17,22,23,24,25,26,27,],[36,-18,-19,-20,-21,-22,-23,]),'MENOR_IGUAL':([17,22,23,24,25,26,27,],[37,-18,-19,-20,-21,-22,-23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'object':([0,12,13,],[2,20,20,]),'empty':([0,],[3,]),'pairs':([4,11,],[5,14,]),'pair':([4,11,],[7,7,]),'value':([12,13,],[16,31,]),'number':([12,13,32,],[17,17,38,]),'boolean':([12,13,],[18,18,]),'null':([12,13,],[19,19,]),'comparison_operation':([12,13,],[21,21,]),'comparison_operator':([17,],[32,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> object','start',1,'p_start','ajson_parser.py',20),
  ('start -> empty','start',1,'p_start','ajson_parser.py',21),
  ('object -> LLAVE_APERTURA pairs LLAVE_CIERRE','object',3,'p_object','ajson_parser.py',28),
  ('object -> LLAVE_APERTURA LLAVE_CIERRE','object',2,'p_object','ajson_parser.py',29),
  ('pairs -> pair','pairs',1,'p_pairs','ajson_parser.py',39),
  ('pairs -> pair COMA pairs','pairs',3,'p_pairs','ajson_parser.py',40),
  ('pair -> STRING_WITH_QUOTES DOS_PUNTOS value','pair',3,'p_pair','ajson_parser.py',50),
  ('pair -> STRING_WITHOUT_QUOTES DOS_PUNTOS value','pair',3,'p_pair','ajson_parser.py',51),
  ('value -> STRING_WITH_QUOTES','value',1,'p_value','ajson_parser.py',58),
  ('value -> number','value',1,'p_value','ajson_parser.py',59),
  ('value -> boolean','value',1,'p_value','ajson_parser.py',60),
  ('value -> null','value',1,'p_value','ajson_parser.py',61),
  ('value -> object','value',1,'p_value','ajson_parser.py',62),
  ('value -> comparison_operation','value',1,'p_value','ajson_parser.py',63),
  ('boolean -> TRUE','boolean',1,'p_boolean','ajson_parser.py',71),
  ('boolean -> FALSE','boolean',1,'p_boolean','ajson_parser.py',72),
  ('null -> NULL','null',1,'p_null','ajson_parser.py',81),
  ('number -> INTEGER','number',1,'p_number','ajson_parser.py',87),
  ('number -> REAL','number',1,'p_number','ajson_parser.py',88),
  ('number -> SCIENTIFIC','number',1,'p_number','ajson_parser.py',89),
  ('number -> BINARY','number',1,'p_number','ajson_parser.py',90),
  ('number -> OCTAL','number',1,'p_number','ajson_parser.py',91),
  ('number -> HEXNUM','number',1,'p_number','ajson_parser.py',92),
  ('comparison_operation -> number comparison_operator number','comparison_operation',3,'p_comparison_operation','ajson_parser.py',99),
  ('comparison_operator -> IGUAL','comparison_operator',1,'p_comparison_operator','ajson_parser.py',108),
  ('comparison_operator -> MAYOR','comparison_operator',1,'p_comparison_operator','ajson_parser.py',109),
  ('comparison_operator -> MAYOR_IGUAL','comparison_operator',1,'p_comparison_operator','ajson_parser.py',110),
  ('comparison_operator -> MENOR','comparison_operator',1,'p_comparison_operator','ajson_parser.py',111),
  ('comparison_operator -> MENOR_IGUAL','comparison_operator',1,'p_comparison_operator','ajson_parser.py',112),
  ('empty -> <empty>','empty',0,'p_empty','ajson_parser.py',119),
]
